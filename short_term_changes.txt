TODO:

#		->	investigate crash when pressing keys with focus on console window

#		->	make other play modes, eg randoming automata but starting from sparse configurations?

##		->	cleanup CellColorMap, make struct Palet, method to change preset palet easily

###		->	Cleanup rule class hierarchy
###		->	Rework tests for rule/knnRule
###		->	get rid of getNextGeneration in Rule, use only getNextGenerationForCenterCell

##		->	Delete class CellNeighborhood


##		->	try running the tuneup gmp program for better performance (manual 2.6)


#		->	See gtest_class_hierarchy_test project for info on how to rebuild gtest so that parameterized tests work
			-> download newest version of gtest


###		->	Make DeathTests for assertions in Constructors

###		->	Reintroduce cell_neighborhood_creator_stub, test setRow throw and constructor asserts. Let
			KnnCellNeighborhoodCreatorTest inherit from CellNeighborhoodCreatorTest, make method runBaseTests()
			
			
#		->	Create value-parameterized abstract tests for CellNeighborhoodCreator hierarchy
			https://github.com/google/googletest/blob/master/googletest/docs/AdvancedGuide.md#creating-value-parameterized-abstract-tests

##		->	Update CellularAutomatonView
##		->	Update CellularAutomatonApp 

##		->	View as observer of controller?

#		->	Write InputHandler class that handles input for app	-> testable with googlemock
#		->	Write Googlemock tests for view/app

##		->	Implement Rule of 3/5 correctly for CellRow

#		-> 	Change BaseBInteger to lazily generate BaseBRepresentation if not generated, change BaseConverter to
			work directly on CellVector. That way CellNeighborhood can be entirely avoided, no frequent conversions
			from vector<Cell> to vector<double> needed and coupling between BaseBInteger and CellLogic is kept to
			a minimum

 
General:
-Remove integers::integer_t and integers::state_t
 
 CellRow:
 -Component initialisation needs to be more concise, so that empty rows (default constructed) can be copied-assigned
  and copy-constructed without workarounds in code like returning empty cellneighborhoodcreator by factory on empty
  rule
  
BaseBInteger:
 -Let BaseConverter operate directly on std::vector<Cell>
 -BaseBInteger initalises BaseBRepresentation lazily <- no need to convert from std::vector<Cell> to std::vector<double>
  if not needed 
   
 CellNeighborhood:
 -This class is nice to have as it keeps BaseBInteger separate from CellLogic?
 -Better Idea: Make BaseBCellInteger class that operates directly on cells?! -> No conversion from
  vector<Cell> to vector<double> needed
  
 BaseBInteger:
 -Make template class out of it?